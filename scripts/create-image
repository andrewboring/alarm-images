#!/bin/bash


#########################################################################################################
# 
# Adapted from:
# https://disconnected.systems/blog/custom-rpi-image-with-github-travis/#first-stage-script-create-image
#
#########################################################################################################



# Setup script error handling see https://disconnected.systems/blog/another-bash-strict-mode for details

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t' # Ensure we are root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

# Some useful constants
mount="mnt" # Local directory to mount the image (automatically created/delete as needed)
#script="setup" # Local setup script to run inside the image
#rpi_tar="ArchLinuxARM-rpi-3-latest.tar.gz" # Raspberry pi 1 image others can be found on https://archlinuxarm.org/

#rpi_url="http://archlinuxarm.org/os"
rpi_url="http://fl.us.mirror.archlinuxarm.org/os"

# Grab the first two arguments, using the defaults if not set
#   ./create-image 					# create an image with defaults: 8GB, armv7
#   ./create-image aarch64     		# create an image,  8GB (default), aarch64,
#   ./create-image armv7 16G        # create a 16GB armv7 image
arch="${1:-armv7}"
size="${2:-8G}"
image="rpi-${arch}-archlinux.img"
file="ArchLinuxARM-rpi-${arch}-latest.tar.gz"
loopdev=

# Tasks to run when the shell exits for any reason, unmount the image and
# general cleanup
cleanup() {
    #[[ -f "${mount}/tmp/${script}" ]] && rm "${mount}/tmp/${script}"
    if [[ -d "${mount}" ]]; then
        umount "${mount}/dev" || true
        umount "${mount}/proc" || true
        umount "${mount}/sys" || true
        umount "${mount}/boot" || true
        umount "${mount}" || true
        rmdir "${mount}" || true
    fi
    [ -n "${loopdev}" ] && losetup --detach "${loopdev}" || true 
}
trap cleanup EXIT

# Download archlinux arm only if we have not already done so
echo Downloading ${file}
[ ! -f "${file}" ] && wget --quiet "${rpi_url}/${file}"

# Create, partition and format the image
#fallocate -l "${size}" "${image}"
dd if=/dev/zero of="${image}" bs=1 seek="${size}" count=0
loopdev=$(losetup --find --show "${image}")
parted --script "${loopdev}" mklabel msdos
parted --script "${loopdev}" mkpart primary fat32 0% 1000M
parted --script "${loopdev}" mkpart primary ext4 1000M 100%
bootdev=$(ls "${loopdev}"*1)
rootdev=$(ls "${loopdev}"*2)
mkfs.vfat -F32 ${bootdev}
mkfs.ext4 -F ${rootdev}

# Mount the image
[ ! -d "${mount}" ] && mkdir "${mount}"
mount "${rootdev}" "${mount}"
[ ! -d "${mount}/boot" ] && mkdir "${mount}/boot"
mount "${bootdev}" "${mount}/boot"

# Install archlinuxarm to the image
tar -xpf "${file}" -C "${mount}" 2> >(grep -v "Ignoring unknown extended header keyword")
